# N.B. assumes you have set the environment variable
# KAFKA_ADVERTISED_HOST_NAME, in the environment of the host where you are
# running docker-compose, to the IP address of the Docker host.
#
# You can determine the Docker host IP with a command like (on Linux):
#
#   ip -o -4 addr show dev docker0 | awk '{sub(/\/[0-9]+$/, "", $4); print $4}'

zookeeper:
  image: confluent/zookeeper
  hostname: zookeeper
  ports:
    - '2181:2181'
kafka:
  image: confluent/kafka
  hostname: kafka
  links:
    - zookeeper
  environment:
    KAFKA_LOG_CLEANUP_POLICY: compact
    KAFKA_ADVERTISED_HOST_NAME:
    KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
  ports:
    - '9092:9092'
schema-registry:
  image: confluent/schema-registry
  hostname: schema-registry
  links:
    - zookeeper
    - kafka
  ports:
    - '48081:8081'
  environment:
    SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL: none
postgres:
  build: ./tmp
  dockerfile: Dockerfile.postgres
  hostname: postgres
  ports:
    - '45432:5432'
bottledwater-json:
  build: ./tmp
  dockerfile: Dockerfile.client
  hostname: bottledwater
  links:
    - postgres
    - kafka
  command: --output-format=json --allow-unkeyed
bottledwater-avro:
  build: ./tmp
  dockerfile: Dockerfile.client
  hostname: bottledwater
  links:
    - postgres
    - kafka
    - schema-registry
  command: --output-format=avro --allow-unkeyed
psql:
  image: postgres:9.5
  links:
    - postgres
  command: 'sh -c ''exec psql -h "$POSTGRES_PORT_5432_TCP_ADDR" -p "$POSTGRES_PORT_5432_TCP_PORT" -U postgres'''
kafka-avro-console-consumer:
  image: confluent/tools
  links:
    - zookeeper
    - kafka
    - schema-registry
  entrypoint: ['/confluent-tools.sh', 'kafka-avro-console-consumer']
kafka-tools:
  image: confluent/tools
  links:
    - zookeeper
    - kafka
  entrypoint: /confluent-tools.sh
ruby:
  image: bwruby
  links:
    - postgres
java:
  image: bwjava
  links:
    - postgres
connect:
  build: ./tmp
  dockerfile: Dockerfile.connect
  hostname: connect
  links:
    - kafka
    - postgres
