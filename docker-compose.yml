# N.B. assumes you have set the environment variable
# KAFKA_ADVERTISED_HOST_NAME, in the environment of the host where you are
# running docker-compose, to the IP address of the Docker host.
#
# You can determine the Docker host IP with a command like:
#
#   docker run --rm debian:latest ip route | awk '/^default via / { print $3 }'

zookeeper:
  image: confluent/zookeeper
  hostname: zookeeper
  ports:
    - '2181:2181'
kafka:
  image: confluent/kafka:0.9.0.0-cp1
  hostname: kafka
  links:
    - zookeeper
  environment:
    KAFKA_LOG_CLEANUP_POLICY:
    KAFKA_ADVERTISED_HOST_NAME:
    KAFKA_AUTO_CREATE_TOPICS_ENABLE:
  ports:
    - '9092:9092'
schema-registry:
  image: confluent/schema-registry
  hostname: schema-registry
  links:
    - zookeeper
    - kafka
  ports:
    - '48081:8081'
  environment:
    SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL: none
postgres:
  build: ./tmp
  dockerfile: Dockerfile.postgres
  hostname: postgres
  ports:
    - '45432:5432'
bottledwater:
  build: ./tmp
  dockerfile: Dockerfile.client
  hostname: bottledwater
  entrypoint:
    - /usr/local/bin/bottledwater-docker-wrapper.sh
    - --topic-config=message.timeout.ms=2000
  environment:
    BOTTLED_WATER_ALLOW_UNKEYED: true
    BOTTLED_WATER_ON_ERROR:
bottledwater-json:
  extends: {service: bottledwater}
  links:
    - postgres
    - kafka
  environment:
    BOTTLED_WATER_OUTPUT_FORMAT: json
bottledwater-avro:
  extends: {service: bottledwater}
  links:
    - postgres
    - kafka
    - schema-registry
  environment:
    BOTTLED_WATER_OUTPUT_FORMAT: avro
psql:
  image: postgres:9.5
  links:
    - postgres
  command: 'sh -c ''exec psql -h "$POSTGRES_PORT_5432_TCP_ADDR" -p "$POSTGRES_PORT_5432_TCP_PORT" -U postgres'''
kafka-avro-console-consumer:
  image: confluent/tools
  links:
    - zookeeper
    - kafka
    - schema-registry
  entrypoint: ['/confluent-tools.sh', 'kafka-avro-console-consumer']
kafka-tools:
  image: confluent/tools
  links:
    - zookeeper
    - kafka
  entrypoint: /confluent-tools.sh
